import logging
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º logger
logger = logging.getLogger(__name__)

def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/bot.log'),
            logging.StreamHandler()
        ]
    )

def calculate_order_total(cart: Dict, products: List[Dict]) -> float:
    total = 0.0
    logger.info(f"Calculating total for cart: {cart}")
    
    for product_name, quantity in cart.items():
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏
        product = next((p for p in products if p['name'] == product_name), None)
        if product:
            product_total = quantity * product['cost']
            logger.info(f"Product: {product_name}, Qty: {quantity}, Price: {product_total}")
            total += product_total
        else:
            logger.warning(f"Product '{product_name}' not found in products list")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            for p in products:
                if product_name in p['name'] or p['name'] in product_name:
                    product_total = quantity * p['cost']
                    logger.info(f"Found similar: {p['name']} for {product_name}")
                    total += product_total
                    break
    
    logger.info(f"Total calculated: {total}")
    return round(total, 2)

def format_order_text(cart: Dict, products: List[Dict], location: str, comment: str) -> str:
    order_text = "‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!*\n\n"
    order_text += "üì¶ *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n"
    
    total = 0.0
    for product_name, quantity in cart.items():
        product = next((p for p in products if p['name'] == product_name), None)
        if product:
            product_total = quantity * product['cost']
            order_text += f"‚Ä¢ {product_name} x{quantity} - {product_total} —Ä—É–±.\n"
            total += product_total
        else:
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ—Ö–æ–∂–µ–µ
            for p in products:
                if product_name in p['name'] or p['name'] in product_name:
                    product_total = quantity * p['cost']
                    order_text += f"‚Ä¢ {p['name']} x{quantity} - {product_total} —Ä—É–±.\n"
                    total += product_total
                    break
    
    order_text += f"\nüí∞ *–ò—Ç–æ–≥–æ: {round(total, 2)} —Ä—É–±.*\n"
    order_text += f"üìç *–õ–æ–∫–∞—Ü–∏—è:* {location}\n"
    order_text += f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}\n\n"
    order_text += "‚è≥ *–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!*"
    
    return order_text