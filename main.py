import sys
import os
import logging
import sqlite3
from typing import *
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    ConversationHandler, CallbackContext
)
from config import BOT_TOKEN, ADMIN_ID, DB_PATH
from database import Database
from utils.helpers import setup_logging, calculate_order_total, format_order_text
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
MAIN_MENU, CATEGORY_SELECTION, PRODUCT_SELECTION, QUANTITY_SELECTION = range(4)
AWAIT_LOCATION, AWAIT_COMMENT = range(6, 8)
ADMIN_PANEL, VIEW_ORDERS, ORDER_DETAIL = range(8, 11)
AWAIT_CLIENT_MESSAGE = 11

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DB_PATH)

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    logger.info(f"User {user.first_name} (ID: {user.id}) started the bot")
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    db.clear_cart(user.id)
    context.user_data.clear()
    
    keyboard = [['–û–¥–Ω–æ—Ä–∞–∑–∫–∏', '–ñ–∏–¥–∫–æ—Å—Ç–∏', '–í–µ–π–ø—ã']]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id == ADMIN_ID:
        keyboard.append(['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "------------------------------------\n"
        "üö¨ *Soft Vape* - –º–∞–≥–∞–∑–∏–Ω –≤–µ–π–ø–æ–≤ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤\n"
        "------------------------------------\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return MAIN_MENU

def handle_main_menu(update: Update, context: CallbackContext):
    text = update.message.text
    user = update.message.from_user
    
    if text in ['–û–¥–Ω–æ—Ä–∞–∑–∫–∏', '–ñ–∏–¥–∫–æ—Å—Ç–∏', '–í–µ–π–ø—ã']:
        context.user_data['category'] = text
        return show_category_products(update, context)
    elif text == 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' and user.id == ADMIN_ID:
        return admin_panel(update, context)
    
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é:")
    return MAIN_MENU

def show_category_products(update: Update, context: CallbackContext):
    category = context.user_data['category']
    products = db.get_products_by_category(category)
    
    if not products:
        keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–ΩÔ∏è']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            f"üòî –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏.",
            reply_markup=reply_markup
        )
        return CATEGORY_SELECTION
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    product_buttons = [[product['name']] for product in products]
    product_buttons.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'])
    
    reply_markup = ReplyKeyboardMarkup(product_buttons, resize_keyboard=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    product_list = "-------------------------------------\n"
    for product in products:
        product_list += f"‚Ä¢ {product['name']} - {product['cost']} —Ä—É–±. ({product['quantity']} —à—Ç.)\n"
    product_list += "-------------------------------------"
    
    update.message.reply_text(
        f"üè∑Ô∏è *{category}*:\n\n{product_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return PRODUCT_SELECTION

#FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ù–ê–í–ò–ì–ê–¶–ò–ò ====================

def handle_back_to_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
    user = update.message.from_user
    logger.info(f"User {user.id} returning to main menu")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('category', None)
    context.user_data.pop('selected_product', None)
    context.user_data.pop('quantity', None)
    
    return start(update, context)

def handle_back_to_products(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º'"""
    user = update.message.from_user
    logger.info(f"User {user.id} returning to products")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º
    if 'category' in context.user_data:
        return show_category_products(update, context)
    else:
        return start(update, context)

def handle_main_menu(update: Update, context: CallbackContext):
    text = update.message.text
    user = update.message.from_user
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return handle_back_to_menu(update, context)
    
    if text in ['–û–¥–Ω–æ—Ä–∞–∑–∫–∏', '–ñ–∏–¥–∫–æ—Å—Ç–∏', '–í–µ–π–ø—ã']:
        context.user_data['category'] = text
        return show_category_products(update, context)
    elif text == 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' and user.id == ADMIN_ID:
        return admin_panel(update, context)
    
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é:")
    return MAIN_MENU

def show_category_products(update: Update, context: CallbackContext):
    category = context.user_data.get('category')
    if not category:
        return start(update, context)
    
    products = db.get_products_by_category(category)
    
    if not products:
        keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            f"üòî –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏.",
            reply_markup=reply_markup
        )
        return CATEGORY_SELECTION
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    product_buttons = [[product['name']] for product in products]
    product_buttons.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'])
    
    reply_markup = ReplyKeyboardMarkup(product_buttons, resize_keyboard=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    product_list = "-------------------------------------\n"
    for product in products:
        product_list += f"‚Ä¢ {product['name']} - {product['cost']} —Ä—É–±. ({product['quantity']} —à—Ç.)\n"
    product_list += "-------------------------------------"
    
    update.message.reply_text(
        f"üè∑Ô∏è *{category}*:\n\n{product_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return PRODUCT_SELECTION

def handle_product_selection(update: Update, context: CallbackContext):
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return handle_back_to_menu(update, context)
    
    product = db.get_product(text)
    if not product:
        update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return PRODUCT_SELECTION
    
    context.user_data['selected_product'] = product
    context.user_data['quantity'] = 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    keyboard = [
        ['‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å', '‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å'],
        ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'],
        ['üõí –î–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    total_price = product['cost'] * context.user_data['quantity']
    
    update.message.reply_text(
        f"------------------------------------------\n"
        f"üéØ *–í—ã –≤—ã–±—Ä–∞–ª–∏:* {product['name']}\n"
        f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {context.user_data['quantity']} —à—Ç.\n"
        f"üí∞ *–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:* {total_price} —Ä—É–±.\n"
        f"------------------------------------------\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return QUANTITY_SELECTION

def handle_quantity_change(update: Update, context: CallbackContext):
    text = update.message.text
    product = context.user_data.get('selected_product')
    
    if not product:
        return start(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º':
        return handle_back_to_products(update, context)
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return handle_back_to_menu(update, context)
    
    if text == '‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å':
        if context.user_data['quantity'] < product['quantity']:
            context.user_data['quantity'] += 1
    elif text == '‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å':
        if context.user_data['quantity'] > 1:
            context.user_data['quantity'] -= 1
    
    total_price = product['cost'] * context.user_data['quantity']
    
    keyboard = [
        ['‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å', '‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å'],
        ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'],
        ['üõí –î–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        f"------------------------------------------\n"
        f"üéØ *–í—ã –≤—ã–±—Ä–∞–ª–∏:* {product['name']}\n"
        f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {context.user_data['quantity']} —à—Ç.\n"
        f"üí∞ *–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:* {total_price} —Ä—É–±.\n"
        f"------------------------------------------\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return QUANTITY_SELECTION

def handle_cart_action(update: Update, context: CallbackContext):
    text = update.message.text
    user = update.message.from_user
    product = context.user_data.get('selected_product')
    
    if not product:
        return start(update, context)
    
    quantity = context.user_data.get('quantity', 1)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º':
        return handle_back_to_products(update, context)
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return handle_back_to_menu(update, context)
    
    if text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
        cart = db.get_cart(user.id)
        cart[product['name']] = quantity
        db.save_cart(user.id, cart)
        
        keyboard = [
            [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            "üìç *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return AWAIT_LOCATION
        
    elif text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑':
        # –ü—É–Ω–∫—Ç 3.2 - –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–æ–∫
        db.clear_cart(user.id)
        update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
        return start(update, context)
        
    elif text == 'üõí –î–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É':
        # –ü—É–Ω–∫—Ç 3.3 - –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
        cart = db.get_cart(user.id)
        cart[product['name']] = quantity
        db.save_cart(user.id, cart)
        
        update.message.reply_text(
            "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup([['–û–¥–Ω–æ—Ä–∞–∑–∫–∏', '–ñ–∏–¥–∫–æ—Å—Ç–∏', '–í–µ–π–ø—ã']], resize_keyboard=True)
        )
        return MAIN_MENU

def handle_location(update: Update, context: CallbackContext):
    if update.message.location:
        location = f"{update.message.location.latitude}, {update.message.location.longitude}"
        context.user_data['location'] = location
        
        update.message.reply_text(
            "üìù *–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:*\n\n"
            "‚Ä¢ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏\n‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n‚Ä¢ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n‚Ä¢ –î—Ä—É–≥–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='Markdown'
        )
        return AWAIT_COMMENT
    else:
        keyboard = [
            [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return AWAIT_LOCATION

def handle_comment(update: Update, context: CallbackContext):
    user = update.message.from_user
    comment = update.message.text
    location = context.user_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    logger.info(f"Processing order for user {user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart = db.get_cart(user.id)
    logger.info(f"Cart: {cart}")
    
    if not cart:
        logger.error("Empty cart - cannot process order")
        update.message.reply_text(
            "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    all_products = db.get_all_products()
    logger.info(f"All products count: {len(all_products)}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    total_price = calculate_order_total(cart, all_products)
    logger.info(f"Total price: {total_price}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    try:
        order_id = db.save_order(
            user.id, 
            user.first_name, 
            cart, 
            total_price, 
            location, 
            comment
        )
        
        if order_id:
            logger.info(f"Order saved with ID: {order_id}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            order_text = format_order_text(cart, all_products, location, comment)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            keyboard = [['/start']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            update.message.reply_text(
                order_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            try:
                admin_text = f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n\n"
                admin_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or '–Ω–µ—Ç'})\n"
                admin_text += f"üìû ID: {user.id}\n\n"
                admin_text += order_text
                
                context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=admin_text,
                    parse_mode='Markdown'
                )
                logger.info("Admin notification sent")
            except Exception as e:
                logger.error(f"Error sending admin notification: {e}")
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            db.clear_cart(user.id)
            context.user_data.clear()
            logger.info("Cart cleared")
            
        else:
            logger.error("Order ID is None - save_order failed")
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
            )
            
    except Exception as e:
        logger.error(f"Error in handle_comment: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
        )
    
    return ConversationHandler.END

# ==================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ====================

def admin_panel(update: Update, context: CallbackContext):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user = update.message.from_user
    
    if user.id != ADMIN_ID:
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('current_orders', None)
    context.user_data.pop('selected_order', None)
    context.user_data.pop('order_status', None)
    
    keyboard = [
        ['üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'],
        ['‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã'],
        ['üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏'],
        ['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Soft Vape*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ADMIN_PANEL

def admin_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return admin_panel(update, context)

def handle_admin_actions(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user = update.message.from_user
    text = update.message.text
    
    if user.id != ADMIN_ID:
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ADMIN_PANEL
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if text == '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        context.user_data.clear()
        return start(update, context)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return admin_panel(update, context)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        safe_text = text.encode('ascii', 'ignore').decode('ascii') if text else 'empty'
        logger.info(f"Admin action: '{safe_text}' from user {user.id}")
    
    # –£–î–ê–õ–ï–ù–û: –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    elif text == 'üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã':
        show_orders(update, context, 'pending')
        return
        
    elif text == '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ':
        show_orders(update, context, 'completed')
        return
        
    elif text == '‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ':
        show_orders(update, context, 'cancelled')
        return
        
    elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã':
        update.message.reply_text(
            "üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.\n\n"
            "–§–æ—Ä–º–∞—Ç: category,name,cost,quantity,description\n"
            "–ü—Ä–∏–º–µ—Ä: –û–¥–Ω–æ—Ä–∞–∑–∫–∏,Elf Bar,1500,25,–í–∫—É—Å –º–∞–Ω–≥–æ\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        context.user_data['awaiting_csv'] = True
        return
        
    elif text == 'üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏':
        keyboard = [
            ['üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã', 'üì¶ –ó–∞–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã'],
            ['üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            "üõçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
    elif text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã':
        keyboard = [['‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å', '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!*\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        context.user_data['awaiting_clear'] = True
        return
        
    elif text == 'üì¶ –ó–∞–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã':
        update.message.reply_text(
            "üì¶ *–ó–∞–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏.\n\n"
            "–§–æ—Ä–º–∞—Ç: category,name,cost,quantity,description\n"
            "–ü—Ä–∏–º–µ—Ä: –û–¥–Ω–æ—Ä–∞–∑–∫–∏,Elf Bar,1500,25,–í–∫—É—Å –º–∞–Ω–≥–æ\n\n"
            "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!* –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!",
            parse_mode='Markdown'
        )
        context.user_data['awaiting_replace'] = True
        return
        
    elif text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã':
        show_products_list(update, context)
        return
        
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        admin_panel(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    elif text in ['‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å', '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞']:
        handle_clear_confirmation(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
    elif text in ['‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', '‚ùå –í–µ—Ä–Ω—É—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–µ', '‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É']:
        handle_order_details(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    elif text.isdigit():
        handle_order_selection(update, context)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞
    admin_panel(update, context)

def show_products_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        products = db.get_all_products()
        
        if not products:
            update.message.reply_text("üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for product in products:
            category = product['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(product)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        products_text = "üõçÔ∏è *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n\n"
        
        for category, category_products in categories.items():
            products_text += f"üìÇ *{category}:*\n"
            for product in category_products:
                products_text += f"‚Ä¢ {product['name']} - {product['cost']} —Ä—É–±. (–æ—Å—Ç–∞—Ç–æ–∫: {product['quantity']} —à—Ç.)\n"
            products_text += "\n"
        
        products_text += f"üìä *–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:* {len(products)}\n"
        products_text += f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏–π:* {len(categories)}"
        
        keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            products_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing products: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")

def show_orders(update: Update, context: CallbackContext, status: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    logger.info(f"Showing orders with status: {status}")
    orders = db.get_all_orders(status)
    logger.info(f"Found {len(orders)} orders")
    
    if not orders:
        keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(
            f"üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'",
            reply_markup=reply_markup
        )
        return
    
    context.user_data['current_orders'] = orders
    context.user_data['order_status'] = status
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
    keyboard = []
    orders_text = f"üì¶ *–ó–∞–∫–∞–∑—ã ({status}):*\n\n"
    
    for i, order in enumerate(orders, 1):
        order_count = len(order['order_data'])
        orders_text += f"{i}. #{order['id']} - {order['user_name']}, {order_count}—à—Ç, {order['total_price']}—Ä—É–±\n"
        
        if i % 2 == 1:
            keyboard.append([str(i)])
        else:
            keyboard[-1].append(str(i))
    
    keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        orders_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def handle_order_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    text = update.message.text
    user = update.message.from_user
    
    if user.id != ADMIN_ID:
        return
    
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        admin_panel(update, context)
        return
    
    orders = context.user_data.get('current_orders', [])
    
    if not text.isdigit():
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:")
        return
    
    order_index = int(text) - 1
    
    if order_index < 0 or order_index >= len(orders):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    selected_order = orders[order_index]
    context.user_data['selected_order'] = selected_order
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = format_order_details(selected_order)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    status = context.user_data.get('order_status', 'pending')
    keyboard = []
    
    if status == 'pending':
        keyboard = [
            ['‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'],
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É']
        ]
    elif status == 'completed':
        keyboard = [
            ['‚ùå –í–µ—Ä–Ω—É—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–µ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É']
        ]
    elif status == 'cancelled':
        keyboard = [
            ['‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É']
        ]
    else:
        keyboard = [
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É']
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        order_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def handle_order_details(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–æ–º"""
    text = update.message.text
    user = update.message.from_user
    order = context.user_data.get('selected_order')
    
    if user.id != ADMIN_ID:
        return
    
    if not order:
        update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        admin_panel(update, context)
        return
    
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É':
        status = context.user_data.get('order_status', 'pending')
        show_orders(update, context, status)
        return
    
    elif text == '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑':
        if db.update_order_status(order['id'], 'completed'):
            update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
            logger.info(f"Order {order['id']} marked as completed by admin {user.id}")
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")
        
        admin_panel(update, context)
        return
    
    elif text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑':
        if db.update_order_status(order['id'], 'cancelled'):
            update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            logger.info(f"Order {order['id']} cancelled by admin {user.id}")
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞")
        
        admin_panel(update, context)
        return
    
    elif text == '‚ùå –í–µ—Ä–Ω—É—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–µ':
        if db.update_order_status(order['id'], 'pending'):
            update.message.reply_text("üîÑ –ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ–∂–∏–¥–∞–Ω–∏–µ")
            logger.info(f"Order {order['id']} returned to pending by admin {user.id}")
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")
        
        admin_panel(update, context)
        return
    
    elif text == '‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑':
        if db.update_order_status(order['id'], 'pending'):
            update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.info(f"Order {order['id']} restored by admin {user.id}")
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        
        admin_panel(update, context)
        return

def handle_csv_file(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞"""
    user = update.message.from_user
    
    if user.id != ADMIN_ID:
        return
    
    if update.message.document:
        try:
            file = update.message.document.get_file()
            file_bytes = file.download_as_bytearray()
            csv_data = file_bytes.decode('utf-8')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—è
            if context.user_data.get('awaiting_csv'):
                # –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
                success = db.import_products_from_csv(csv_data)
                
                if success:
                    update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞!")
                else:
                    update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞")
                    
            elif context.user_data.get('awaiting_replace'):
                # –ó–∞–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤
                success = replace_products_from_csv(update, context, csv_data)
                
                if success:
                    update.message.reply_text("‚úÖ –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω—ã –∏–∑ CSV —Ñ–∞–π–ª–∞!")
                else:
                    update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                update.message.reply_text("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π CSV —Ñ–∞–π–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
                
        except Exception as e:
            logger.error(f"Error processing CSV: {e}")
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
    context.user_data.pop('awaiting_csv', None)
    context.user_data.pop('awaiting_replace', None)
    admin_panel(update, context)

def replace_products_from_csv(update: Update, context: CallbackContext, csv_data: str):
    """–ó–∞–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    try:
        import csv
        from io import StringIO
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        backup_products = db.get_all_products()
        
        # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π CSV
        reader = csv.DictReader(StringIO(csv_data))
        new_products = []
        
        for row in reader:
            new_products.append((
                row.get('category', ''),
                row.get('name', ''),
                float(row.get('cost', 0)),
                int(row.get('quantity', 0)),
                row.get('image_path', ''),
                row.get('description', '')
            ))
        
        if not new_products:
            update.message.reply_text("‚ùå CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return False
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute("DELETE FROM products")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        cursor.executemany(
            "INSERT INTO products (category, name, cost, quantity, image_path, description) VALUES (?, ?, ?, ?, ?, ?)",
            new_products
        )
        
        conn.commit()
        conn.close()
        
        logger.info(f"Products replaced: {len(backup_products)} old -> {len(new_products)} new")
        return True
        
    except Exception as e:
        logger.error(f"Error replacing products from CSV: {e}")
        return False

def handle_clear_confirmation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    text = update.message.text
    user = update.message.from_user
    
    logger.info(f"Clear confirmation: '{text}' from user {user.id}")
    print(f"DEBUG: Clear confirmation: '{text}' from user {user.id}")
    
    if user.id != ADMIN_ID:
        return
    
    if not context.user_data.get('awaiting_clear'):
        logger.warning("Clear confirmation called without awaiting_clear flag")
        return
    
    if text == '‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å':
        try:
            logger.info("Starting products clearing process")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            backup_products = db.get_all_products()
            logger.info(f"Backup products count: {len(backup_products)}")
            
            create_products_backup(backup_products)
            
            # –û—á–∏—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ –æ—á–∏—Å—Ç–∫–∏
            cursor.execute("SELECT COUNT(*) FROM products")
            count_before = cursor.fetchone()[0]
            logger.info(f"Products count before clearing: {count_before}")
            
            cursor.execute("DELETE FROM products")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            cursor.execute("SELECT COUNT(*) FROM products")
            count_after = cursor.fetchone()[0]
            logger.info(f"Products count after clearing: {count_after}")
            
            conn.commit()
            conn.close()
            
            update.message.reply_text(
                f"‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
                f"üì¶ –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {count_before}\n"
                f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            )
            logger.info(f"Products cleared successfully: {count_before} items removed")
            
        except Exception as e:
            logger.error(f"Error clearing products: {e}")
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        
    elif text == '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞':
        update.message.reply_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        logger.info("Products clearing cancelled by admin")
    
    context.user_data.pop('awaiting_clear', None)
    admin_panel(update, context)

def create_products_backup(products):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        import csv
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_filename = f"backup_products_{timestamp}.csv"
        backup_path = os.path.join(CSV_DIR, backup_filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(CSV_DIR, exist_ok=True)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        with open(backup_path, 'w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(['category', 'name', 'cost', 'quantity', 'image_path', 'description'])
            
            for product in products:
                writer.writerow([
                    product['category'],
                    product['name'],
                    product['cost'],
                    product['quantity'],
                    product.get('image_path', ''),
                    product.get('description', '')
                ])
        
        logger.info(f"Products backup created: {backup_path}")
        return backup_path
        
    except Exception as e:
        logger.error(f"Error creating backup: {e}")
        return None

def handle_db_delete_confirmation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    text = update.message.text
    
    if not context.user_data.get('awaiting_db_delete'):
        return ADMIN_PANEL
    
    if text == '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –ë–î':
        try:
            import os
            if os.path.exists(DB_PATH):
                os.remove(DB_PATH)
                update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞!")
                logger.info("Database file deleted")
            else:
                update.message.reply_text("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"Error deleting database: {e}")
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        
    elif text == '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞':
        update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    context.user_data.pop('awaiting_db_delete', None)
    return admin_panel(update, context)


def format_order_details(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    order_text = f"üì¶ *–ó–∞–∫–∞–∑ #{order['id']}*\n\n"
    order_text += f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {order['user_name']}\n"
    order_text += f"üìû *ID:* {order['user_id']}\n"
    order_text += f"üí∞ *–°—É–º–º–∞:* {order['total_price']} —Ä—É–±.\n"
    order_text += f"üìã *–°—Ç–∞—Ç—É—Å:* {order['status']}\n"
    order_text += f"‚è∞ *–î–∞—Ç–∞:* {order['created_at']}\n\n"
    
    order_text += "üõçÔ∏è *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n"
    for product_name, quantity in order['order_data'].items():
        order_text += f"‚Ä¢ {product_name} x{quantity}\n"
    
    order_text += f"\nüìç *–õ–æ–∫–∞—Ü–∏—è:* {order['location']}\n"
    order_text += f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {order['comment']}\n"
    
    return order_text
# ==================== –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def handle_navigation(update: Update, context: CallbackContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    text = update.message.text
    
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return handle_back_to_menu(update, context)
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º':
        return handle_back_to_products(update, context)
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return admin_panel(update, context)
    elif text == '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        context.user_data.clear()
        return start(update, context)
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return None

def stop_bot(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user = update.message.from_user
    
    if user.id != ADMIN_ID:
        update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    update.message.reply_text("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater
    context.dispatcher.stop()
    context.dispatcher.updater.stop()
    
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    user = update.message.from_user
    logger.info(f"User {user.first_name} canceled the conversation.")
    
    db.clear_cart(user.id)
    context.user_data.clear()
    
    update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
    )
    
    return ConversationHandler.END

def error_handler(update: Update, context: CallbackContext):
    logger.error(f"Update {update} caused error {context.error}")
    
    try:
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
        )
    except:
        pass
    
    return ConversationHandler.END

def test_order(update: Update, context: CallbackContext):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞"""
    user = update.message.from_user
    
    if user.id != ADMIN_ID:
        update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É
    test_cart = {'–ò–ö–°–†–û–° 5 –ú–ò–ù–ò': 1}
    db.save_cart(user.id, test_cart)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
    context.user_data['location'] = "55.7558, 37.6173"  # –¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è
    context.user_data['test_mode'] = True
    
    update.message.reply_text(
        "üìù *–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:*",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    
    return AWAIT_COMMENT

def test_db(update: Update, context: CallbackContext):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user = update.message.from_user
    
    if user.id != ADMIN_ID:
        update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
        products = db.get_all_products()
        products_text = f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ: {len(products)}\n"
        for product in products[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            products_text += f"‚Ä¢ {product['name']} - {product['cost']} —Ä—É–±.\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
        orders = db.get_all_orders()
        orders_text = f"\nüìã –ó–∞–∫–∞–∑—ã –≤ –±–∞–∑–µ: {len(orders)}\n"
        for order in orders[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            orders_text += f"‚Ä¢ #{order['id']} - {order['user_name']} - {order['status']}\n"
        
        update.message.reply_text(products_text + orders_text)
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"Database test error: {e}")

def force_clear_products(update: Update, context: CallbackContext):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user = update.message.from_user
    
    if user.id != ADMIN_ID:
        update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_products = db.get_all_products()
        create_products_backup(backup_products)
        
        # –û—á–∏—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM products")
        count_before = cursor.fetchone()[0]
        
        cursor.execute("DELETE FROM products")
        
        cursor.execute("SELECT COUNT(*) FROM products")
        count_after = cursor.fetchone()[0]
        
        conn.commit()
        conn.close()
        
        update.message.reply_text(
            f"‚úÖ –¢–æ–≤–∞—Ä—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω—ã!\n"
            f"üì¶ –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {count_before}\n"
            f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
        )
        logger.info(f"Products force cleared: {count_before} items removed")
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        logger.error(f"Force clear error: {e}")

def force_reset(update: Update, context: CallbackContext):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    user = update.message.from_user
    logger.info(f"Force reset for user {user.id}")
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    db.clear_cart(user.id)
    context.user_data.clear()
    
    update.message.reply_text(
        "üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ...",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
    return start(update, context)

def kill_all_bots(update: Update, context: CallbackContext):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user = update.message.from_user
    
    if user.id != ADMIN_ID:
        update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º webhook –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
        context.bot.delete_webhook()
        update.message.reply_text("üõë –í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.info("All bot instances stopped by admin command")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        context.dispatcher.stop()
        context.dispatcher.updater.stop()
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        logger.error(f"Error stopping bot instances: {e}")
    
    return ConversationHandler.END

def handle_client_message(update, context):
    update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!")


def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(Filters.text & ~Filters.command, handle_main_menu),
            ],
            CATEGORY_SELECTION: [
                MessageHandler(Filters.regex('^‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é$'), handle_back_to_menu),
                MessageHandler(Filters.text & ~Filters.command, show_category_products),
            ],
            PRODUCT_SELECTION: [
                MessageHandler(Filters.regex('^‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é$'), handle_back_to_menu),
                MessageHandler(Filters.text & ~Filters.command, handle_product_selection),
            ],
            QUANTITY_SELECTION: [
                MessageHandler(Filters.regex('^(‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å|‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å)$'), handle_quantity_change),
                MessageHandler(Filters.regex('^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑|üõí –î–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É)$'), handle_cart_action),
                MessageHandler(Filters.regex('^‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º$'), handle_back_to_products),
                MessageHandler(Filters.regex('^‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é$'), handle_back_to_menu),
            ],
            AWAIT_LOCATION: [
                MessageHandler(Filters.location, handle_location),
                MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑$'), cancel),
                MessageHandler(Filters.regex('^‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º$'), handle_back_to_products),
            ],
            AWAIT_COMMENT: [
                MessageHandler(Filters.text & ~Filters.command, handle_comment),
            ],
            ADMIN_PANEL: [
                MessageHandler(Filters.text & ~Filters.command, handle_admin_actions),
                MessageHandler(Filters.document.file_extension("csv"), handle_csv_file),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel), 
            CommandHandler('start', start),
            CommandHandler('stop', stop_bot)
        ],
        allow_reentry=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫!)
    dp.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    dp.add_handler(CommandHandler('admin', admin_panel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {BOT_TOKEN}")
    print(f"üëë –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print("üëë –ö–æ–º–∞–Ω–¥–∞ /admin - –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    print("üì¶ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏")

    try:
        updater.start_polling(drop_pending_updates=True)
        updater.idle()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return

if __name__ == '__main__':
    main()